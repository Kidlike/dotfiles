#!/bin/bash

function pwd-physical() {
	logical=$(builtin pwd -L)
	physical=$(builtin pwd -P)

	if [ "${logical}" == "${physical}" ]; then
			echo "${logical}"
	else
			echo "${logical} -> ${physical}"
	fi
}

function whatismyip() {
    curl ipv4.icanhazip.com
}

function pdfman() {
	if [ ! -r /tmp/pdfman-$1.pdf ]; then
		man -t $1 | ps2pdf - /tmp/pdfman-$1.pdf
	fi
	evince /tmp/pdfman-$1.pdf
}
complete -F _man pdfman

function killprocname(){
	procs=`ps -ef | grep -i "$1" | grep -v grep | tr -s " " " " | cut -d\  -f 2`

	oldIFS=IFS
	IFS=\
	countProcs=`echo $procs | wc -l`
	IFS=$oldIFS

	if [ ${countProcs} -gt 1 ]
	then
		echo "Not unique selection..." &> /dev/stderr
		return
	elif [ "$(echo $procs)X" == "X" ]
	then
		echo "No such process..."
		return
	fi
	echo "kill: ${procs}"
	kill -9 ${procs}
}

function grepkill(){
	if [ $# -eq 1 ]; then
		killargs="-9"
		filter=$1
	elif [ $# -eq 2 ]; then
		killargs=$1
		filter=$2
	fi
	procs=`ps -ef | grep -i "$filter" | grep -v grep | tr -s " " " " | cut -d\  -f 2`
	if [ ! -z "${procs}" ]; then
		kill ${killargs} ${procs}
	else
		echo "no processes found";
	fi
}

if command -v mvn >/dev/null 2>&1; then
	function mvn-rdebug-test() {
		mvn clean test -Dmaven.surefire.debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8002 -Xnoagent -Djava.compiler=NONE" -Dcobertura.skip=true -Dfindbugs.skip=true -Dcheckstyle.skip=true -DfailIfNoTests=false -Dtest=$1 -o
	}

	function mvn-go-up() {
		while ! ls pom.xml >/dev/null 2>&1; do
			[ "$(pwd)" == ~ ] && break;
			cd ..
		done
	}
fi

git-go-up() {
	while ! ls .git >/dev/null 2>&1; do
		[ "$(pwd)" == ~ ] && break;
		cd ..
	done
}

if command -v svn >/dev/null 2>&1; then
    function svn-go-up() {
		while ! ls .svn >/dev/null 2>&1; do
			[ "$(pwd)" == ~ ] && break;
			cd ..
		done
    }
fi

function cd-switch() {
    cd $(pwd | sed "s#/$1/#/$2/#g")
}

function load-scripts() {
    if [ -d ~/install/_scripts -a -d ~/bin ]; then
        cd ~/install/_scripts
        for f in $(\ls -1); do
            linkName=$(echo $f | rev | cut -d\. -f2- | rev)
            rm -f ~/bin/$linkName 2>/dev/null
            if [ -x $f ]; then
                ln -sf ~/install/_scripts/$f ~/bin/$linkName
            fi
        done
        cd - >/dev/null 2>&1
    fi
}

function unload-scripts() {
    if [ -d ~/install/_scripts -a -d ~/bin ]; then
        cd ~/install/_scripts
        for f in $(\ls -1); do
            linkName=$(echo $f | rev | cut -d\. -f2- | rev)
            rm -f ~/bin/$linkName 2>/dev/null
        done
        cd - >/dev/null 2>&1
    fi
}

if command -v homesick >/dev/null 2>&1; then
	function homesick-all() {
		[ $# -ne 1 ] && homesick && return 1;
		[ $(homesick | tr -s ' ' ' ' | grep -B1000 "options:" | cut -d\  -f 3 | egrep "^[a-zA-Z]+$" | egrep -c "^${1}$") -ne 1 ] && echo "Invalid command" && return 2;
		while read hl; do
			repo=$(echo $hl | tr -s ' ' ' ' | cut -d\  -f1);
			#echo -e "\e[31m--= ${repo} =--\e[39m"
			echo -e "\e[43m--= ${repo} =--\e[39m\e[49m"
			homesick $1 $repo;
			echo
		done < <(homesick list )
	}
fi

function free-swap() {
	free_data="$(free)"
	mem_data="$(echo "$free_data" | grep 'Mem:')"
	free_mem="$(echo "$mem_data" | awk '{print $4}')"
	buffers="$(echo "$mem_data" | awk '{print $6}')"
	cache="$(echo "$mem_data" | awk '{print $7}')"
	total_free=$((free_mem + buffers + cache))
	used_swap="$(echo "$free_data" | grep 'Swap:' | awk '{print $3}')"

	echo -e "Free memory:\t$total_free kB ($((total_free / 1024)) MB)\nUsed swap:\t$used_swap kB ($((used_swap / 1024)) MB)"
	if [[ $used_swap -eq 0 ]]; then
		echo "Congratulations! No swap is in use."
	elif [[ $used_swap -lt $total_free ]]; then
		echo "Freeing swap..."
		sudo swapoff -a
		sudo swapon -a
	else
		echo "Not enough free memory. Exiting."
		return 1
	fi
}

#if [ $(lsb_release -d | grep -ic ubuntu) -ge 1 ]; then
#	function delete-old-kernels() {
#		sudo apt-get purge $(dpkg -l linux-{image,headers}-"[0-9]*" | awk '/ii/{print $2}' | grep -ve "$(uname -r | sed -r 's/-[a-z]+//')")
#	}
#fi

precmd_tmux_rename() {
	local gitConf="$(git-go-up; pwd)/.git/config"
	if [ -r "$gitConf" ]; then
		projectName=$(grep 'url' "$gitConf" | head -1 | cut -d\= -f2 | cut -d\: -f2 | cut -d\. -f1)
		tmux rename-window "î‚  $projectName"
	fi
}

precmd_history() {
	history -a
}

preexec_tmux_rename() {
	if [ -n $TMUX ]; then
		local cmd=$(echo "$@" | sed -e 's/^\ *//' | sed -e 's/\ *$//')
		if [[ $cmd =~ ^ssh.* ]]; then
			local pid=$!
			# ssh user@host
			if [ $(echo "$cmd" | grep -c '@') -eq 1 ]; then
				local oldIFS=$IFS;
				IFS=' ';
				for token in $(echo "$cmd"); do
					if [[ $token =~ .*@.* ]]; then
						oldName=$(tmux display-message -p '#W')
						echo "$oldName" > ~/.ssh/.sessions/$pid
						((tmux setw automatic-rename off && sleep 1.1; [ -r ~/.ssh/.sessions/$pid ] && tmux rename-window $token;) &)
						break;
					fi;
				done;
				IFS=$oldIFS
			else
				# ssh alias
				if [ $(echo "$cmd" | grep -o ' ' | wc -l) -eq 1 ]; then
					local host=$(echo "$cmd" | cut -d\  -f2)
					local user=$(grep -A5 "Host $host" ~/.ssh/config | grep 'User ' | head -1 | sed -n 's/.*User\ \(.*\)/\1/p')
					if [ -z "$user" ]; then
						oldName=$(tmux display-message -p '#W')
						echo "$oldName" > ~/.ssh/.sessions/$pid
						((tmux setw automatic-rename off && sleep 1.1; [ -r ~/.ssh/.sessions/$pid ] && tmux rename-window "ssh $host";) &)
					else
						oldName=$(tmux display-message -p '#W')
						echo "$oldName" > ~/.ssh/.sessions/$pid
						((tmux setw automatic-rename off && sleep 1.1; [ -r ~/.ssh/.sessions/$pid ] && tmux rename-window "${user}@${host}";) &)
					fi
				fi
			fi
		fi
	fi
}

function pitest-results() {
	lastReport=$(\ls -1trh target/pit-reports/ | tail -1)
    google-chrome $(pwd)/target/pit-reports/${lastReport}
}

function lllast() {
	find $@ -maxdepth 1 -type f | xargs ls -ltr 2>/dev/null | tail -1
}

function tmux-mvn-rename() {
	tmux rename-window -t $(tmux display-message -p '#I') "$(xmlstarlet sel -N x='http://maven.apache.org/POM/4.0.0' -t -v '/x:project/x:name' pom.xml)"
}

notify-speaker() {
	( \speaker-test --frequency $1 --test sine )&
	pid=$!
	\usleep $((${2}*1000))
	exec 3>&2          # 3 is now a copy of 2
	exec 2> /dev/null  # 2 now points to /dev/null
	\kill -9 $pid >/dev/null 2>&1
	usleep 1000
	exec 2>&3          # restore stderr to saved
	exec 3>&-          # close saved version
}

notify-speaker-command-done() {
	#notify-speaker 432 400 &>/dev/null
	notify-speaker 2160 150 &>/dev/null
	usleep 150000
	notify-speaker 2160 150 &>/dev/null
}

function pastebin() {
  if [[ $1 ]]; then
    curl -F 'sprunge=<-' "http://sprunge.us" <"$1"
  else
    curl -F 'sprunge=<-' "http://sprunge.us"
  fi
}


if [ -n $TMUX ]; then
	function ssh() {
		/usr/bin/ssh $@
		pid=$!
		if [ -r ~/.ssh/.sessions/$pid ]; then
			tmux rename-window "$(cat ~/.ssh/.sessions/$pid)"
			tmux setw automatic-rename on
			rm ~/.ssh/.sessions/$pid >/dev/null 2>&1
		fi
	}
fi

MVN() {
	$MVN $@
}

mvn-jq-profile-deployables() {
    local profileId=$1
    shift
    jq ".project.profiles.profile | map(select(.id==\"${profileId}\")) | .[] .build .plugins .plugin | map(select(.artifactId==\"cargo-maven2-plugin\")) | .[] .configuration .configuration .deployables .deployable" "$*"
}

kill-tomcat() {
    pid=$(pgrep -f 'java .*/opt/tomcat')
    rc=$?
    if [ $rc -ne 0 ]; then
        pid=$(pgrep -f 'java .*/opt/fc-apache-tomcat')
        rc=$?
        [ $rc -ne 0 ] && return $rc;
        kill -9 $pid
    else
        kill -9 $pid
    fi
}

kill-sky() {
    kill -9 $(pgrep -f '/usr/lib/sky') 2>/dev/null
    kill -9 $(pgrep -f 'sky-latest-x86_64') 2>/dev/null
}

mvn-generate-master-password() {
    if [[ ! -e ~/.m2/settings-security.xml ]]; then
        PASSWORD_ENCODED=$(mvn -emp "$(cat /dev/urandom|base64|head -n1)" );
        cat > ~/.m2/settings-security.xml  <<EOF
<settingsSecurity>
  <master>${PASSWORD_ENCODED}</master>
</settingsSecurity>
EOF

        echo Created '~/.m2/settings-security.xml';
    fi
}

mvn-set-passwd() {
    mvn-generate-master-password;
    echo Please enter your Windows/Network password. This will replace ALL server passwords in your '~/.m2/settings.xml' file.;
    echo -n "> ";
    read -s PASSWORD;
    PASSWORD="$(mvn -ep ${PASSWORD})";
    echo;
    echo Encrypted password is ${PASSWORD};
    cd ~/.m2;
    cp settings.xml settings.xml.old;
    xml2json -t xml2json --pretty --strip_newlines --strip_namespace --strip_text settings.xml > settings.json.old
    jq ".settings.servers.server[].password = \"${PASSWORD}\"" settings.json.old > settings.json
    xml2json -t json2xml settings.json | xmllint --format - > settings.xml
    echo 'Updated in ~/.m2/settings.xml';
    cd - > /dev/null 2>&1
}

mvn-tomcat-deploy() {
    module=$(xmlstarlet sel -N x='http://maven.apache.org/POM/4.0.0' -t -v '/x:project/x:artifactId' pom.xml)
    war=$(find target/${module}-*.war)
    if [ ! -r "$war" ]; then
        echo "Did you build first?"
        return
    fi
    cp "$war" "/opt/tomcat/webapps/${module}.war"
    sync
}

find-type() {
    type=$1
    shift
    find . -type f -name "*.$type" "$@"
}

find-types() {
    while read ext; do
        count=$(find . -type f -iname "*\.$ext" | wc -l)
        echo -e "$ext\t$count"
    done< <(find . -type f -regex '.*src\/.*\..*$' | awk -F '.' '{print $NF}' | sort -u) |
    column -t -x |
    sort -rn -k2
}

svn-checkout-uat-sp12() {
    svn co --depth files "$1" uat
    svn update --depth files uat/automatic
    svn update uat/automatic/uat_services
}

svn-checkout-uat-sp18() {
    svn co --depth files "$1" uat
    svn update --depth files uat/automatic
    svn update uat/automatic/uat
    svn update uat/automatic/src
    svn update uat/automatic/logs
}

mvn-cleanup-old-artifacts() {
    oldRemaining=$(df -Ph ~/.m2/repository/ | tail -1 | awk '{print $4}')
    all=$(find ~/.m2 -type d -name "*SNAPSHOT" | wc -l)
    del=$(find ~/.m2 -type d -mtime +90 -name "*SNAPSHOT" | wc -l)
    find ~/.m2 -type d -mtime +90 -name "*SNAPSHOT" -exec rm -rf {} \; 2>/dev/null
    newRemaining=$(df -Ph ~/.m2/repository/ | tail -1 | awk '{print $4}')
    percentage=$(echo 100*${del}/${all} | bc)
    echo -n "Cleaned up ${percentage}%."
    [ $percentage -gt 0 ] && echo -n " Free space: ${oldRemaining} -> ${newRemaining}"
    echo
}

intellij-cleanup() {
    if [ -d '.idea' ]; then
        rm -rf '.idea'
        find . -type f -name '*.iml' -delete
        echo "Cleaned up IntelliJ files."
    else
        echo "No IntelliJ project found."
    fi
}

svn-ignore-intellij-files() {
    while read f; do
        dir=$(echo $f | rev | cut -d\/ -f2- | rev);
        props="$(svn propget svn:ignore $dir)"
        props=$(echo "$props" | grep -v 'iml')
        props=$(echo "$props
*.iml")
        svn propset svn:ignore "$props" "$dir";
    done < <(find . -type f -name '*.iml')
}


svn-ignore-maven-target() {
    while read d; do
        dir=$(echo $d | rev | cut -d\/ -f2- | rev);
        props="$(svn propget svn:ignore $dir)"
        props=$(echo "$props" | grep -v 'target')
        props=$(echo "$props
target")
        svn propset svn:ignore "$props" "$dir";
    done < <(find . -type d -name 'target')
}

kubectl-set-ns() {
	local NS=${1:?Required parameter: namespace}
	kubectl config set-context $(kubectl config current-context) --namespace=$NS
	export KUBE_NS="$NS"
}

kubectl-get-ns() {
	local NS=$(grep -i namespace ~/.kube/config | awk "{print \$2}")
	echo "$NS"
	export KUBE_NS="$NS"
}

git-branch-prune() {
    git fetch -p
    for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do 
	    git branch -D $branch
    done
}

treel() {
	tree -C "$@" | less -R
}
